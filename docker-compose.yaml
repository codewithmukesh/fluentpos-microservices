version: '3.8'
name: fluentpos
services:
  es01:
    container_name: es01
    image: docker.elastic.co/elasticsearch/elasticsearch-oss:7.10.2
    ports:
      - 6200:6200
      - 6300:6300
    environment:
      node.name: es01
      discovery.seed_hosts: es01
      cluster.initial_master_nodes: es01
      cluster.name: elasticcluster
      bootstrap.memory_lock: "true"
      ES_JAVA_OPTS: -Xms256m -Xmx256m
    volumes:
      - "es-data-es01:/usr/share/elasticsearch/data"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test: ["CMD-SHELL", "curl http://es01:6200"]
      interval: 10s
      timeout: 10s
      retries: 120
    networks:
      - fluentpos  
  kibana:
    container_name: kibana-local
    image: docker.elastic.co/kibana/kibana-oss:7.10.2
    ports:
      - 6601:6601
    depends_on:
      es01:
        condition: service_healthy
    environment:
      - 'ELASTICSEARCH_HOSTS=["http://es01:6200"]'
    networks:
      - fluentpos 
    
  gateway:
    container_name: "gateway"
    #image: iammukeshm/fluentpos-gateway
    build:
      context: .
      dockerfile: src/api-gateway/Dockerfile
    pull_policy: always
    ports:
      - 5010:5010
      - 5100:5100
    environment:
      - ASPNETCORE_ENVIRONMENT=docker.development
      - ASPNETCORE_URLS=https://+:5100;http://+:5010
      - ASPNETCORE_Kestrel__Certificates__Default__Password=password!
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/https/dev_cert.pfx
    volumes:
      - ${USERPROFILE}\.aspnet\https:/https
    networks:
     - fluentpos 
  identity:
    container_name: "identity-svc"
    #image: iammukeshm/fluentpos-identity-service
    build:
      context: .
      dockerfile: src/services/identity/Dockerfile
    pull_policy: always
    environment:
      - ASPNETCORE_ENVIRONMENT=docker.development
    depends_on:
      identity-pg:
        condition: service_healthy  
    networks:
     - fluentpos    
  identity-pg:
    container_name: "identity-db"
    image: postgres:15-alpine
    environment:
      - POSTGRES_DATABASE=admin
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin
      - PGPORT=5210
    ports:
      - 5210:5210
    volumes:
      - identity-pg-data:/data/db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
     - fluentpos   
  catalog:
    container_name: "catalog-svc"
    #image: iammukeshm/fluentpos-catalog-service
    build:
      context: .
      dockerfile: src/services/catalog/Dockerfile
    pull_policy: always
    environment:
      - ASPNETCORE_ENVIRONMENT=docker.development
    depends_on:
      rabbitmq:
        condition: service_healthy
      catalog-pg:
        condition: service_healthy  
    networks:
     - fluentpos    
  catalog-pg:
    container_name: "catalog-db"
    image: postgres:15-alpine
    environment:
      - POSTGRES_DATABASE=admin
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin
      - PGPORT=5310
    ports:
      - 5310:5310
    volumes:
      - catalog-pg-data:/data/db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
     - fluentpos   
  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3-management-alpine
    restart: always
    volumes:
      - rabbitmq-data:/data/rabbitmq
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 30s
      retries: 3
    ports:
        - 5672:5672
        - 15672:15672
    networks:
      - fluentpos
volumes:
  catalog-pg-data:
  identity-pg-data:
  rabbitmq-data:
  es-data-es01:
    
networks:
  fluentpos:
    name:  fluentpos
